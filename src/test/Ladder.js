/**
[사다리 문제]
n명의 참가자가 사다리 게임을 통하여 경품을 타려고 한다. 참가자들은 1번부터 n번까지 번호를 부여받고, 경품 번호도 1번부터 n번까지 존재한다.
사다리 도면은 2차원 배열로 주어지고, 사다리 사이에 막대기가 있으면 숫자 1, 없으면 수자 0으로 주어진다. 
예를 들어 참가자 수가 4명이고 높이가 5인 사다리의 예시는 [[1,0,1],[0,1,0],[0,0,1],[0,0,0],[1,0,0]] 이 된다.
참가자 수 n과 사다리 도면 ladder가 매개변수로 주어질 때, 1번 참가자부터 n번 참가자까지 순서대로 몇 번 경품을 받게 되는지 구하는
solution 함수를 완성해라.
위 예시의 경우 1번 참가자는 4번 경품, 2번 참가자는 2번 경품, 3번 참가자는 3번 경품, 4번 참가자는 1번 경품이므로 순서대로
[4,2,3,1]을 return한다.

제한사항
- 사람 수 n : 3이상 100 이하의 자연수
- 사다리 높이 : 2 이상, 1000 이하의 자연수

작성언어
- javascript
 */

export function solution(n, ladder) {
  // 결과를 저장할 배열 초기화: 참가자 번호와 동일한 값으로 설정.
  // 최초에는 참가자나 경품 전부 순서대로라고 생각하고 사다리 막대기를 만나면 좌우 경품 교환하는 식으로 끝까지 돌린다
  let results = new Array(n).fill(0).map((_, i) => i + 1);

  // 사다리 도면을 순회하며 막대기 위치에 따라 경품 번호 교환
  for (let i = 0; i < ladder.length; i++) {
    // 각 높이별로 반복
    for (let j = 0; j < ladder[i].length; j++) {
      // 각 막대기 위치별로 반복
      // 막대기가 있으면 해당 위치의 참가자와 오른쪽 참가자의 경품 번호를 교환
      if (ladder[i][j] === 1) {
        [results[j], results[j + 1]] = [results[j + 1], results[j]];
        console.log(results);
      }
    }
  }

  // 참가자별 경품 번호 결과 반환
  return results;
}
